#+TITLE: Emacs configuration

* Emacs configuration

** Some basic configuration
1) disable the startup screen
2) Disable bell sound
3) set global line number mode
4) set font size
5) always open split windows to the right
6) set visual line mode for text wrapping
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq visible-bell 1)
  (global-linum-mode t)
  (set-face-attribute 'default nil :height 180)
  (setq split-height-threshold nil)
  (setq split-width-threshold 100)
  (global-visual-line-mode)
#+END_SRC


The following configuration sets a directory for backup (.*~) and auto-save  (#*#)  files which populate the directories and are so annoying. 
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
        version-control t     ; use versioned backups
        delete-old-versions t 
        kept-new-versions 3 ; 3 most recent versions
        kept-old-versions 0) ; No oldest versions
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

Remove the toolbar and show clock in bottom mode line
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (display-time-mode 1)
#+END_SRC

Change the required yes-no prompt to y-n
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Basic package management
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)

#+END_SRC

*** Install use package if not already installed
#+BEGIN_SRC emacs-lisp
(if (not (package-installed-p 'use-package))
    (progn
      (package-refresh-contents)
      (package-install 'use-package)))

(eval-when-compile
  (require 'use-package))
#+END_SRC

 
*** Diminish package
[[https://github.com/myrjola/diminish.el][Link]]
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

** Theme settings
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :config
    (load-theme 'monokai t))
#+END_SRC


** Auto complete (Company mode)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :init (global-company-mode)
    :config
    (setq company-idle-delay 0))
#+END_SRC

Add the anaconda bindings
#+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :ensure t
  :config (add-to-list 'company-backends 'company-anaconda))
#+END_SRC


# ;; Auto-complete configuration 
# ;; (ac-config-default)
# ;; '(ac-auto-show-menu 0.0)
# ;; '(ac-delay 0.0)
# ;; '(ac-trigger-commands (quote (self-insert-command \.)))
# ;; '(ac-trigger-key "TAB")

** LaTeX configuration
Configure Auctex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq TeX-view-program-selection (quote (((output-dvi has-no-display-manager) "dvi2tty") ((output-dvi style-pstricks) "dvips and gv") (output-pdf "Okular") (output-dvi "xdvi") (output-pdf "Evince") (output-html "xdg-open"))))
    (setq TeX-error-overview-open-after-TeX-run t))

#+END_SRC

** Php configuration
#+BEGIN_SRC emacs-lisp
  (use-package php-mode 
    :mode ("\\.php\\'" "\\.inc\\'" "\\.module\\'"))
#+END_SRC

** Org mode configuration
#+BEGIN_SRC emacs-lisp
    (use-package org
      :defer t

      :init
      (setq org-agenda-files (list
                              "/mnt/other/dropbox/Dropbox/org_files"
                                   "~/notes/notes.org"))
      (setq org-log-done 'time)
      (setq org-default-notes-file "/mnt/other/dropbox/Dropbox/org_files/refile.org")
      (setq org-startup-indented t)

      
      :bind
      ("C-c a" . org-agenda)
      ("C-c r" . org-capture)
      ("C-c l" . org-store-link)
      ("C-c b" . org-iswitchb))
#+END_SRC

*** Tags
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist (quote (
                              ("article"   . ?a)
                              ("code"      . ?c)
                              ("errands"   . ?e)
                              ("idea"      . ?d)
                              ("job"       . ?j)
                              ("meeting"   . ?m)
                              ("note"      . ?n)
                              ("personal"  . ?i)
                              ("learning"  . ?l)
                              ("project"   . ?p)
                              ("work"      . ?w))))
#+END_SRC
 
*** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :defer t
    :init (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

*** Configuration for Note taking from pdfs

Refer to [[https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/][this link]] for the source.
**** Org-Ref 
[[https://github.com/jkitchin/org-ref][Link]]
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t
    :defer t
    :init 
    (progn
      (setq org-ref-bibliography-notes "~/notes/articles.org"
            org-ref-default-bibliography '("~/notes/articles.bib")
            org-ref-pdf-directory "~/notes/pdfs/")
      (use-package parsebib
        :ensure t))

  )

#+END_SRC
***** Parsebib 
Though this is a dependency for some reason I need to install it



**** Interleave
Interleave pdfs: [[https://github.com/rudolfochrist/interleave][Link]]
#+BEGIN_SRC emacs-lisp
  (use-package interleave
    :ensure t
    :defer t)
#+END_SRC



**** [[*Configuration%20for%20ivy-bibtex][Configuration for ivy-bibtex]]

*** Org Capture

**** Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(
                                          ; Papers
                                ("a"               ; key
                                 "Article"         ; name
                                 entry             ; type
                                 (file+headline "~/notes/notes.org" "Article")  ; target
                                 "* %^{Title} %(org-set-tags)  :article: \n:PROPERTIES:\n:Created: %U\n:Linked: %a\n:END:\n%i\nBrief description:\n%?"  ; template
                                 :prepend t        ; properties
                                 :empty-lines 1    ; properties
                                 :created t        ; properties
                                 )
                                          ;TODO tag
                                ("t"          ; key
                                 "Todos" ; name
                                 entry        ; type
                                 "TODO %^{Title} %^G\n:PROPERTIES:\n:Created: %U\n:Linked: %A\n:END:\n%i\n%?" ; template
                                 :prepend t        ; properties
                                 :empty-lines 1    ; properties
                                 :created t        ; properties
                                 :kill-buffer t) ; properties

                                ))

#+END_SRC
** Python Configuration
Configure [[https://github.com/jorgenschaefer/elpy][Elpy]]
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    ;; :defer t
    :config
    (progn
      (elpy-enable)))

#+END_SRC

** Electric operator
Configure [[https://github.com/davidshepherd7/electric-operator][Electric Operator]] mode
#+BEGIN_SRC emacs-lisp
  (use-package electric-operator
    :ensure t
    :defer t
    :config
    (add-hook 'python-mode-hook #'electric-operator-mode))
#+END_SRC

** Ivy, Swiper and Counsel

*** Ivy
Configurations for [[https://github.com/abo-abo/swiper][Ivy mode]].
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-virtual-abbreviate 'full) ; Show full virtual file paths
      (setq ivy-count-format "%d/%d ")
      (setq ivy-extra-directories nil)))
#+END_SRC

*** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (progn
      (global-set-key (kbd "C-s") 'swiper)))
#+END_SRC


*** Configuration for ivy-bibtex
#+BEGIN_SRC emacs-lisp
    (use-package ivy-bibtex
      :ensure t
      :defer t
      :config
      ( progn
        (setq bibtex-completion-bibliography "~/notes/articles.bib"
              bibtex-completion-library-path "~/notes/pdfs/"
              bibtex-completion-notes-path "~/notes/articles.org")
        ))

#+END_SRC

** pdf-tools
#+BEGIN_SRC emacs-lisp
  ;; (defun my-pdf-tools-hook()
  ;;   (linum-mode -1) ; line numbers choke emacs
  ;;   )
#+END_SRC


(not using require as its not necessary that I have sudo privileges on the machine 
to install pdf-tools system dependencies)

Adding the following keybinds:
| key | function        |
|-----+-----------------|
| h   | highlight       |
| d   | delete          |
| t   | text annotation |
|     |                 |

Also, setup C-s to do regular isearch instead of using Swiper as that searches the binary of the pdf
#+BEGIN_SRC emacs-lisp
  ;; (use-package pdf-tools
  ;;   :config
  ;;   (pdf-tools-install)
  ;;   (add-hook 'pdf-view-mode-hook 'my-pdf-tools-hook)
  ;;   (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
  ;;   (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
  ;;   (define-key pdf-view-mode-map (kbd "d") 'pdf-annot-delete)
  ;;   (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+END_SRC

** Undo / Redo
Setup [[https://www.emacswiki.org/emacs/UndoTree][undo-tree]] for easy undo/redos. Config from [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org#undo-tree-mode---visualize-your-undos-and-branches]].
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+END_SRC

** Productivity Tools

*** Which key
Install [[https://github.com/justbur/emacs-which-key][which key]]
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (progn
      (which-key-setup-minibuffer)
      (which-key-mode))
     )
#+END_SRC
